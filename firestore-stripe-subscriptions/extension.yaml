# Copyright 2020 Stripe, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: firestore-stripe-subscriptions
version: 0.1.14
specVersion: v1beta

displayName: Run Subscription Payments with Stripe
description: Controls access to paid content by syncing your subscriptions with Firebase Authentication.

license: Apache-2.0

sourceUrl: https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions
releaseNotesUrl: https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md

author:
  authorName: Stripe
  url: https://stripe.com

contributors:
  - authorName: Thorsten Schaeff
    url: https://twitter.com/thorwebdev
  - authorName: Firebase
    url: https://firebase.google.com

billingRequired: true # this extension makes requests to a third party API (Stripe)

roles:
  - role: firebaseauth.admin
    reason: >-
      Allows the extension to set custom claims for users.
  - role: datastore.user
    reason: >-
      Allows the extension to store customers & subscriptions in Cloud Firestore.

resources:
  - name: createCustomer
    type: firebaseextensions.v1beta.function
    description: >-
      Creates a Stripe customer object when a new user signs up.
    properties:
      location: ${LOCATION}
      runtime: nodejs10
      eventTrigger:
        eventType: providers/firebase.auth/eventTypes/user.create
        resource: projects/${PROJECT_ID}

  - name: createCheckoutSession
    type: firebaseextensions.v1beta.function
    description: >-
      Creates a Checkout session to collect the customer's payment details.
    properties:
      location: ${LOCATION}
      runtime: nodejs10
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.create
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}

  - name: createPortalLink
    type: firebaseextensions.v1beta.function
    description: >-
      Creates links to the customer portal for the user to manage their payment & subscription details.
    properties:
      location: ${LOCATION}
      runtime: nodejs10
      httpsTrigger: {}

  - name: handleWebhookEvents
    type: firebaseextensions.v1beta.function
    description: >-
      Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.
    properties:
      location: ${LOCATION}
      runtime: nodejs10
      httpsTrigger: {}

  - name: onUserDeleted
    type: firebaseextensions.v1beta.function
    description: >-
      Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.
    properties:
      location: ${LOCATION}
      runtime: nodejs10
      eventTrigger:
        eventType: providers/firebase.auth/eventTypes/user.delete
        resource: projects/${PROJECT_ID}

  - name: onCustomerDataDeleted
    type: firebaseextensions.v1beta.function
    description: >-
      Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.
    properties:
      location: ${LOCATION}
      runtime: nodejs10
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.delete
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}

params:
  - param: LOCATION
    label: Cloud Functions deployment location
    description: >-
      Where do you want to deploy the functions created for this extension?
      You usually want a location close to your database.
      For help selecting a location, refer to the
      [location selection guide](https://firebase.google.com/docs/functions/locations).
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Los Angeles (us-west2)
        value: us-west2
      - label: Salt Lake City (us-west3)
        value: us-west3
      - label: Las Vegas (us-west4)
        value: us-west4
      - label: Warsaw (europe-central2)
        value: europe-central2
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Zurich (europe-west6)
        value: europe-west6
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
      - label: Osaka (asia-northeast2)
        value: asia-northeast2
      - label: Seoul (asia-northeast3)
        value: asia-northeast3
      - label: Mumbai (asia-south1)
        value: asia-south1
      - label: Jakarta (asia-southeast2)
        value: asia-southeast2
      - label: Montreal (northamerica-northeast1)
        value: northamerica-northeast1
      - label: Sao Paulo (southamerica-east1)
        value: southamerica-east1
      - label: Sydney (australia-southeast1)
        value: australia-southeast1
    default: us-central1
    required: true
    immutable: true

  - param: PRODUCTS_COLLECTION
    label: Products and pricing plans collection
    description: >-
      What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?
    default: products
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Firestore collection paths must be an odd number of segments separated by slashes, e.g. "path/to/collection".
    required: true

  - param: CUSTOMERS_COLLECTION
    label: Customer details and subscriptions collection
    description: >-
      What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?
      This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.
    default: customers
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Firestore collection paths must be an odd number of segments separated by slashes, e.g. "path/to/collection".
    required: true

  - param: SYNC_USERS_ON_CREATE
    label: Sync new users to Stripe customers and Cloud Firestore
    description: >-
      Do you want to automatically sync new users to customer objects in Stripe?
      If set to 'Sync', the extension will create a new customer object in Stripe
      and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication.
      If set to 'Do not sync' (default), the extension will create the customer object "on the fly" with the first checkout session creation.
    type: select
    options:
      - label: 'Do not sync'
        value: 'Do not sync'
      - label: 'Sync'
        value: 'Sync'
    default: 'Do not sync'
    required: true

  - param: DELETE_STRIPE_CUSTOMERS
    label: Automatically delete Stripe customer objects
    description: >-
      Do you want to automatically delete customer objects in Stripe? 
      When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' 
      the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.
    type: select
    options:
      - label: 'Do not delete'
        value: 'Do not delete'
      - label: 'Auto delete'
        value: 'Auto delete'
    default: 'Do not delete'
    required: true

  - param: STRIPE_API_KEY
    label: Stripe API key with restricted access
    description: >-
      What is your Stripe API key? 
      We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access)
      with write access only for the "Customers", "Checkout Sessions" and "Customer portal" resources.
      And read-only access for the "Subscriptions" and "Plans" resources.
    example: rk_live_1234567890
    required: true

  - param: STRIPE_WEBHOOK_SECRET
    label: Stripe webhook secret
    description: >-
      This is your signing secret for a Stripe-registered webhook. 
      This webhook can only be registered after installation.
      Leave this value untouched during installation, then follow the 
      postinstall instructions for registering your webhook
      and configuring this value.
    example: whsec_1234567890
    default: FILL_IN_FROM_POSTINSTALL
    required: true
